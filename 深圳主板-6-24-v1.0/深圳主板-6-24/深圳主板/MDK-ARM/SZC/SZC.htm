<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [SZC\SZC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image SZC\SZC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 14 20:06:14 2024
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; uart_com_process &rArr; UART_LCD_process &rArr; USART_LCD_Transmit &rArr; Harmonic_Content_Calculate &rArr; powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[108]">cr4_fft_256_stm32</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">ADC_DMAConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4b]">ADC_DMAError</a> from stm32f1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4a]">ADC_DMAHalfConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f1xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from stm32f1xx_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f1xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f1xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c7]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1c8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1c9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>cr4_fft_256_stm32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cr4_fft_256_stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[1ca]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentDataReadFun
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentDataReadFun
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_EEP_Initial
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentDataReadFun
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentDataReadFun
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentDataReadFun
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[53]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[5c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[5b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[49]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[4b]"></a>ADC_DMAError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[4a]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[70]"></a>ADC_Enable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[71]"></a>AT24CXX_ReadLongByte</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_ReadLongByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT24CXX_ReadLongByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Cur_calibrae_data
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Cur_calibrae_data1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Cur_calibrae_data
</UL>

<P><STRONG><a name="[77]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
</UL>

<P><STRONG><a name="[78]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>

<P><STRONG><a name="[193]"></a>BCDtoDec</STRONG> (Thumb, 322 bytes, Stack size 20 bytes, tool.o(i.BCDtoDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BCDtoDec
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_vol_setpoint
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leakctrl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_factors
</UL>

<P><STRONG><a name="[7a]"></a>Broadcasting_time</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usart.o(i.Broadcasting_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Broadcasting_time &rArr; RTC_Set_Time &rArr; HAL_RTC_SetTime &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>ChartoHex</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tool.o(i.ChartoHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChartoHex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Cur_calibrae_data1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Cur_calibrae_data
</UL>

<P><STRONG><a name="[11b]"></a>Clear_Send_Data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcd_usart.o(i.Clear_Send_Data))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Uart_prepare
</UL>

<P><STRONG><a name="[7d]"></a>Conter_Updata</STRONG> (Thumb, 1340 bytes, Stack size 8 bytes, main.o(i.Conter_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Conter_Updata &rArr; Write_Selftest_Record &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_lcd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[83]"></a>Cur_Process</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, main.o(i.Cur_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Cur_Process &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
</UL>

<P><STRONG><a name="[89]"></a>Cur_Switch</STRONG> (Thumb, 3496 bytes, Stack size 72 bytes, main.o(i.Cur_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Cur_Switch &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_uart_change
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW_3D_E2_read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_factors
</UL>

<P><STRONG><a name="[14e]"></a>Cur_Switch_F</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(i.Cur_Switch_F))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factors
</UL>

<P><STRONG><a name="[8b]"></a>Cur_quick_protect</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(i.Cur_quick_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cur_quick_protect &rArr; D3_C_Quick_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_C_C
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_B_C
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_A_C
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_Quick_Process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_Quick_Process
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_Quick_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[92]"></a>Cur_sample_process</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, main.o(i.Cur_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Cur_sample_process &rArr; I_min_process &rArr; Write_I &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_min_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_max_process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>Cur_uart_change</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, usart.o(i.Cur_uart_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Cur_uart_change &rArr; Cur_Switch &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_cur_setpoint
</UL>

<P><STRONG><a name="[98]"></a>Cur_uart_get</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usart.o(i.Cur_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Cur_uart_get &rArr; DectoBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_cur_setpoint
</UL>

<P><STRONG><a name="[9a]"></a>CurrentDataReadFun</STRONG> (Thumb, 2318 bytes, Stack size 32 bytes, main.o(i.CurrentDataReadFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CurrentDataReadFun &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>D3_A_BH_Process</STRONG> (Thumb, 486 bytes, Stack size 8 bytes, main.o(i.D3_A_BH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = D3_A_BH_Process &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_actionhandle_A
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[8f]"></a>D3_A_Quick_Process</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, main.o(i.D3_A_Quick_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = D3_A_Quick_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_actionhandle_A
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_quick_protect
</UL>

<P><STRONG><a name="[9e]"></a>D3_B_BH_Process</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, main.o(i.D3_B_BH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = D3_B_BH_Process &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_actionhandle_B
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[90]"></a>D3_B_Quick_Process</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, main.o(i.D3_B_Quick_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = D3_B_Quick_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_actionhandle_B
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_quick_protect
</UL>

<P><STRONG><a name="[a0]"></a>D3_C_BH_Process</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, main.o(i.D3_C_BH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = D3_C_BH_Process &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_actionhandle_C
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[91]"></a>D3_C_Quick_Process</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, main.o(i.D3_C_Quick_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = D3_C_Quick_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_actionhandle_C
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_quick_protect
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>DW_3D_E2_read</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, main.o(i.DW_3D_E2_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DW_3D_E2_read &rArr; Cur_Switch &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Day_factors_clear</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, main.o(i.Day_factors_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Day_updata_process
</UL>

<P><STRONG><a name="[a5]"></a>Day_updata_process</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, main.o(i.Day_updata_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Day_updata_process &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Day_factors_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DectoBCD</STRONG> (Thumb, 382 bytes, Stack size 36 bytes, tool.o(i.DectoBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leak
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_V
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Leak_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_time_process
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_V
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_Over_process
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_vol
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak_class
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_cur
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_Power
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_reactive_Power
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_frequency_power
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factor_Power
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Slope_Value
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_AD_Value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LD_XL_Value
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DY_XL_Value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_XL_Value
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_AD_Value
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_uart_get
</UL>

<P><STRONG><a name="[a9]"></a>EEPROM_C</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, 24cxx.o(i.EEPROM_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EEPROM_C &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
</UL>

<P><STRONG><a name="[8a]"></a>EEPROM_R</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, 24cxx.o(i.EEPROM_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_record
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tingdian
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW_3D_E2_read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_trip
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_protectoff
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_dataclear
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_vol
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_vol
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_leak
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_cur
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_leak
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_cur
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_leakctrl
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factors
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leaktrip
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakself
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakrecord
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakover
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakalarm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_cur_setpoint
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_EEP_Initial
</UL>

<P><STRONG><a name="[aa]"></a>ERR_data_sent</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart.o(i.ERR_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ERR_data_sent &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_vol_setpoint
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_trip_tim
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_timing
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_time
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_password
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leakctrl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_hezha_tim
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_fenzha_tim
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_factors
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_cur_setpoint
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_baud
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_uart_cal_handle
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_vol_setpoint
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_vol
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak_class
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_cur
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_Power
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_timing
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_state
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_reactive_Power
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_trip
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_leakctrl
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_frequency_power
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factors
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factor_Power
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_cur_setpoint
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ctrlword
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_baud
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Slope_Value
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_AD_Value
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DY_XL_Value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_XL_Value
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_AD_Value
</UL>

<P><STRONG><a name="[ad]"></a>Energy_reset</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, usart.o(i.Energy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Energy_reset &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[b8]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[af]"></a>Event_clear</STRONG> (Thumb, 1220 bytes, Stack size 40 bytes, usart.o(i.Event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Event_clear &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[b0]"></a>Flag_Updata</STRONG> (Thumb, 800 bytes, Stack size 8 bytes, main.o(i.Flag_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flag_Updata
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[8c]"></a>Get_A_C</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.Get_A_C))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_quick_protect
</UL>

<P><STRONG><a name="[8d]"></a>Get_B_C</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.Get_B_C))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_quick_protect
</UL>

<P><STRONG><a name="[8e]"></a>Get_C_C</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.Get_C_C))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_quick_protect
</UL>

<P><STRONG><a name="[ef]"></a>Get_L</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.Get_L))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[b1]"></a>Get_record</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, disp.o(i.Get_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Get_record &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f1xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[6d]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[6f]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[6e]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[b4]"></a>HAL_ADC_Init</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>HAL_DMA_Abort</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 910 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>HAL_DMA_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[ba]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[b6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 792 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[82]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha_process
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_short_process
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_leak_process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_pos_judge
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_process
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lackzero_judge
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flag_Updata
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_BH_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_BH_Process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_BH_Process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conter_Updata
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_hezha_tim
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_fenzha_tim
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_state
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_C
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_prcoess
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_Quick_Process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_Quick_Process
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_Quick_Process
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conter_Updata
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038ResetSet
</UL>

<P><STRONG><a name="[6c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[16e]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[c1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bd]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[b3]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c9]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RTCEx_RTCEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc_ex.o(i.HAL_RTCEx_RTCEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_RTCIRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RTCEx_RTCEventErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc_ex.o(i.HAL_RTCEx_RTCEventErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_RTCIRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RTCEx_RTCIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f1xx_hal_rtc_ex.o(i.HAL_RTCEx_RTCIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_RTCIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_RTCEventErrorCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_RTCEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Readtime
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leak
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_V
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Leak_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_V
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_Over_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Day_updata_process
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadTimeCounter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadAlarmCounter
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateUpdate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Readtime
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leak
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_V
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Leak_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_V
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_Over_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Day_updata_process
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
</UL>

<P><STRONG><a name="[d5]"></a>HAL_RTC_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WeekDayNum
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadTimeCounter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadAlarmCounter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadAlarmCounter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Conter_Updata &rArr; Write_Selftest_Record &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 618 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Conter_Updata &rArr; Write_Selftest_Record &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_prcoess
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_pos_judge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Sample_C
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Sample_B
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Sample_A
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_L
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flag_Updata
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_BH_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_BH_Process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_BH_Process
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_quick_protect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conter_Updata
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[f6]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[f2]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_UART_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UART_MspInit</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 1496 bytes, Stack size 16 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_Transmit</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_Data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_addr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_DATA_NOMAL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>

<P><STRONG><a name="[176]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[102]"></a>HT7038Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ht7038.o(i.HT7038Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HT7038Reset &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038ResetSet
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>HT7038ResetSet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ht7038.o(i.HT7038ResetSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT7038ResetSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038Reset
</UL>

<P><STRONG><a name="[104]"></a>HT7038_EEP_Initial</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, ht7038.o(i.HT7038_EEP_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HT7038_EEP_Initial &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>HT7038_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ht7038.o(i.HT7038_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HT7038_Init &rArr; HT7038_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>HT7038_Read</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, ht7038.o(i.HT7038_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HT7038_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xiebo
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentDataReadFun
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_cal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
</UL>

<P><STRONG><a name="[ae]"></a>HT7038_Write</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ht7038.o(i.HT7038_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HT7038_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xiebo
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_cal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038Reset
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>Harmonic_Content_Calculate</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, dsp_fft.o(i.Harmonic_Content_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Harmonic_Content_Calculate &rArr; powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cr4_fft_256_stm32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
</UL>

<P><STRONG><a name="[114]"></a>HexToChar</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tool.o(i.HexToChar))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leak_uart_cal_handle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_uart_cal_handle
</UL>

<P><STRONG><a name="[10d]"></a>IIC_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Ack &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[110]"></a>IIC_NAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[75]"></a>IIC_Read_Byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
</UL>

<P><STRONG><a name="[73]"></a>IIC_Send_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IIC_Send_Byte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_C
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
</UL>

<P><STRONG><a name="[72]"></a>IIC_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Start &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_C
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
</UL>

<P><STRONG><a name="[76]"></a>IIC_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_C
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
</UL>

<P><STRONG><a name="[74]"></a>IIC_Wait_Ack</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_C
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
</UL>

<P><STRONG><a name="[93]"></a>IWDG_Feed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.IWDG_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha_process
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_short_process
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Leak_Record
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_time_process
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Cur_calibrae_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Day_updata_process
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW_3D_E2_read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
</UL>

<P><STRONG><a name="[94]"></a>I_max_process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.I_max_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = I_max_process &rArr; Write_I &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
</UL>

<P><STRONG><a name="[95]"></a>I_min_process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.I_min_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = I_min_process &rArr; Write_I &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
</UL>

<P><STRONG><a name="[113]"></a>LCD_Cal</STRONG> (Thumb, 2788 bytes, Stack size 48 bytes, lcd_usart.o(i.LCD_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LCD_Cal &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToChar
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
</UL>

<P><STRONG><a name="[118]"></a>LCD_Send_Data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd_usart.o(i.LCD_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_or_Readresponse
</UL>

<P><STRONG><a name="[119]"></a>LCD_Tem_trip</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.LCD_Tem_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_Tem_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
</UL>

<P><STRONG><a name="[11a]"></a>LCD_Uart_prepare</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lcd_usart.o(i.LCD_Uart_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Uart_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_or_Readresponse
</UL>

<P><STRONG><a name="[11c]"></a>Lackzero_judge</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, main.o(i.Lackzero_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lackzero_judge
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lackzero_vol_process
</UL>

<P><STRONG><a name="[11d]"></a>Lcd12864_Write16CnCHAR</STRONG> (Thumb, 524 bytes, Stack size 56 bytes, display_ziku.o(i.Lcd12864_Write16CnCHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Lcd12864_Write16CnCHAR
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_hezha
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_selftest
</UL>

<P><STRONG><a name="[120]"></a>Leak_Over_process</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, main.o(i.Leak_Over_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Leak_Over_process &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_process
</UL>

<P><STRONG><a name="[121]"></a>Leak_max_process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.Leak_max_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Leak_max_process &rArr; Write_leak &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leak
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
</UL>

<P><STRONG><a name="[123]"></a>Leak_min_process</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.Leak_min_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Leak_min_process &rArr; Write_leak &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leak
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
</UL>

<P><STRONG><a name="[f1]"></a>Leak_process</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, main.o(i.Leak_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Leak_process &rArr; TB_leak_process &rArr; Trip_Process &rArr; ctrlword5_analyze &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leak_handle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_leak_process
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_Leak_process
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_Over_process
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[97]"></a>MODIFY_EEP_W</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, 24cxx.o(i.MODIFY_EEP_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_uart_change
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tingdian
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword5_analyze
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_tingdian
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leak
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_V
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Leak_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_time_process
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_V
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_Over_process
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW_3D_E2_read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leak_uart_cal_handle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_vol_setpoint
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_trip_tim
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_timing
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_password
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leakctrl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_hezha_tim
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_fenzha_tim
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_factors
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_cur_setpoint
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_baud
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_addr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_uart_cal_handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_cal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_clear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
</UL>

<P><STRONG><a name="[128]"></a>MX_ADC1_Init</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>MX_DMA_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>MX_GPIO_Init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>MX_RTC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>MX_TIM6_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>MX_UART4_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>Normal_Leak_process</STRONG> (Thumb, 680 bytes, Stack size 0 bytes, main.o(i.Normal_Leak_process))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_process
</UL>

<P><STRONG><a name="[132]"></a>Offset_cal</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, usart.o(i.Offset_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Offset_cal &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[182]"></a>Password_verification</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, usart.o(i.Password_verification))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>Power_Sample_A</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.Power_Sample_A))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ed]"></a>Power_Sample_B</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.Power_Sample_B))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ee]"></a>Power_Sample_C</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.Power_Sample_C))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[18f]"></a>RS485_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.RS485_Init))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTCEx_RTCIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_RTCIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>RTC_Readtime</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, state.o(i.RTC_Readtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RTC_Readtime &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
</UL>

<P><STRONG><a name="[7c]"></a>RTC_Set_Date</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.RTC_Set_Date))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_Set_Date &rArr; HAL_RTC_SetDate &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_time
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Broadcasting_time
</UL>

<P><STRONG><a name="[7b]"></a>RTC_Set_Time</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rtc.o(i.RTC_Set_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_Set_Time &rArr; HAL_RTC_SetTime &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_time
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Broadcasting_time
</UL>

<P><STRONG><a name="[135]"></a>Read_Cur_calibrae_data</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, main.o(i.Read_Cur_calibrae_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Read_Cur_calibrae_data &rArr; AT24CXX_ReadLongByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
</UL>

<P><STRONG><a name="[136]"></a>Read_DL_AD_Value</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usart.o(i.Read_DL_AD_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_DL_AD_Value &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[138]"></a>Read_DL_XL_Value</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usart.o(i.Read_DL_XL_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_DL_XL_Value &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[139]"></a>Read_DY_XL_Value</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usart.o(i.Read_DY_XL_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_DY_XL_Value &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[13a]"></a>Read_LD_XL_Value</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart.o(i.Read_LD_XL_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_LD_XL_Value &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[13b]"></a>Read_SD_AD_Value</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, usart.o(i.Read_SD_AD_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_SD_AD_Value &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[13c]"></a>Read_SD_Cur_calibrae_data</STRONG> (Thumb, 1056 bytes, Stack size 40 bytes, main.o(i.Read_SD_Cur_calibrae_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Read_SD_Cur_calibrae_data &rArr; AT24CXX_ReadLongByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChartoHex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
</UL>

<P><STRONG><a name="[13e]"></a>Read_SD_Cur_calibrae_data1</STRONG> (Thumb, 968 bytes, Stack size 40 bytes, main.o(i.Read_SD_Cur_calibrae_data1))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Read_SD_Cur_calibrae_data1 &rArr; AT24CXX_ReadLongByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChartoHex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
</UL>

<P><STRONG><a name="[13f]"></a>Read_SD_Slope_Value</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, usart.o(i.Read_SD_Slope_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_SD_Slope_Value &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[140]"></a>Read_SD_Value</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, usart.o(i.Read_SD_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_SD_Value &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[141]"></a>Read_addr</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, usart.o(i.Read_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_addr &rArr; Read_response1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[144]"></a>Read_baud</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usart.o(i.Read_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_baud &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[145]"></a>Read_ctrlword</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, usart.o(i.Read_ctrlword))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_ctrlword &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[146]"></a>Read_cur_setpoint</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, usart.o(i.Read_cur_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Read_cur_setpoint &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_uart_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[147]"></a>Read_event_leakalarm</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, usart.o(i.Read_event_leakalarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Read_event_leakalarm &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[148]"></a>Read_event_leakover</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, usart.o(i.Read_event_leakover))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Read_event_leakover &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[149]"></a>Read_event_leakrecord</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, usart.o(i.Read_event_leakrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Read_event_leakrecord &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[14a]"></a>Read_event_leakself</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, usart.o(i.Read_event_leakself))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Read_event_leakself &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[14b]"></a>Read_event_leaktrip</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, usart.o(i.Read_event_leaktrip))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Read_event_leaktrip &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[14c]"></a>Read_factor_Power</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, usart.o(i.Read_factor_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_factor_Power &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[14d]"></a>Read_factors</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, usart.o(i.Read_factors))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Read_factors &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch_F
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[14f]"></a>Read_fenzha_tim</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, usart.o(i.Read_fenzha_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_fenzha_tim &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[150]"></a>Read_frequency_power</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usart.o(i.Read_frequency_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_frequency_power &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[151]"></a>Read_hezha_tim</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, usart.o(i.Read_hezha_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_hezha_tim &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[152]"></a>Read_leakctrl</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, usart.o(i.Read_leakctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Read_leakctrl &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[153]"></a>Read_max_cur</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, usart.o(i.Read_max_cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Read_max_cur &rArr; point_just &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[155]"></a>Read_max_leak</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, usart.o(i.Read_max_leak))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Read_max_leak &rArr; point_just &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[156]"></a>Read_max_min_cur</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, usart.o(i.Read_max_min_cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Read_max_min_cur &rArr; point_just &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[157]"></a>Read_max_min_leak</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, usart.o(i.Read_max_min_leak))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Read_max_min_leak &rArr; point_just &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[158]"></a>Read_max_min_vol</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, usart.o(i.Read_max_min_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Read_max_min_vol &rArr; point_just &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[159]"></a>Read_max_vol</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, usart.o(i.Read_max_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Read_max_vol &rArr; point_just &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_just
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[15a]"></a>Read_num_dataclear</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart.o(i.Read_num_dataclear))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Read_num_dataclear &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[15b]"></a>Read_num_protectoff</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart.o(i.Read_num_protectoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Read_num_protectoff &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[15c]"></a>Read_num_trip</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, usart.o(i.Read_num_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Read_num_trip &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[15d]"></a>Read_reactive_Power</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, usart.o(i.Read_reactive_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_reactive_Power &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[137]"></a>Read_response</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, usart.o(i.Read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_vol_setpoint
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_vol
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak_class
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_cur
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_Power
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_trip_tim
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_timing
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time_run
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_state
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_reactive_Power
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_trip
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_protectoff
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_dataclear
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_vol
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_vol
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_leak
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_cur
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_leak
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_cur
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_leakctrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_hezha_tim
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_frequency_power
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_fenzha_tim
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factors
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factor_Power
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leaktrip
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakself
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakrecord
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakover
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakalarm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_cur_setpoint
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ctrlword
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_baud
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Slope_Value
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_AD_Value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LD_XL_Value
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DY_XL_Value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_XL_Value
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_AD_Value
</UL>

<P><STRONG><a name="[143]"></a>Read_response1</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usart.o(i.Read_response1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_response1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_prepare1
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_addr
</UL>

<P><STRONG><a name="[15f]"></a>Read_state</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, usart.o(i.Read_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_state &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[160]"></a>Read_time</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, usart.o(i.Read_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Read_time &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[161]"></a>Read_time_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usart.o(i.Read_time_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_time_run &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[162]"></a>Read_timing</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, usart.o(i.Read_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Read_timing &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[163]"></a>Read_trip_tim</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, usart.o(i.Read_trip_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_trip_tim &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[164]"></a>Read_variable_Power</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, usart.o(i.Read_variable_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_variable_Power &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[165]"></a>Read_variable_cur</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usart.o(i.Read_variable_cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_variable_cur &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[166]"></a>Read_variable_leak</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usart.o(i.Read_variable_leak))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_variable_leak &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leak_handle
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[167]"></a>Read_variable_leak_class</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usart.o(i.Read_variable_leak_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_variable_leak_class &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[168]"></a>Read_variable_vol</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, usart.o(i.Read_variable_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_variable_vol &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[169]"></a>Read_vol_setpoint</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usart.o(i.Read_vol_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_vol_setpoint &rArr; Read_response &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[16a]"></a>Record_V</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, main.o(i.Record_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Record_V &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_min_process
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_max_process
</UL>

<P><STRONG><a name="[84]"></a>Record_data_propare</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.Record_data_propare))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_trip
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_trip
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_trip
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_trip
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lack_vol_trip
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process_time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_pos_judge
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_BH_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_BH_Process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_BH_Process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
</UL>

<P><STRONG><a name="[16b]"></a>Run_time_process</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.Run_time_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Run_time_process &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>SDA_IN</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, myiic.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDA_IN &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[10e]"></a>SDA_OUT</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, myiic.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[16c]"></a>SD_uart_cal_handle</STRONG> (Thumb, 2384 bytes, Stack size 32 bytes, usart.o(i.SD_uart_cal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_uart_cal_handle &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToChar
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>Switch_pos_judge</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, main.o(i.Switch_pos_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Switch_pos_judge
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_flags
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>SystemClock_Config</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>TB_leak_process</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(i.TB_leak_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = TB_leak_process &rArr; Trip_Process &rArr; ctrlword5_analyze &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_process
</UL>

<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Conter_Updata &rArr; Write_Selftest_Record &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[171]"></a>Time_bill</STRONG> (Thumb, 1128 bytes, Stack size 104 bytes, main.o(i.Time_bill))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Time_bill &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>Trip_Action</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, main.o(i.Trip_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Tem_trip
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_trip
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_trip
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_trip
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_trip
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lack_vol_trip
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process_time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_BH_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_BH_Process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_BH_Process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
</UL>

<P><STRONG><a name="[126]"></a>Trip_Process</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, main.o(i.Trip_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Trip_Process &rArr; ctrlword5_analyze &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rms_make
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword5_analyze
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_leak_process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_process
</UL>

<P><STRONG><a name="[175]"></a>Trip_Process_time</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, main.o(i.Trip_Process_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Trip_Process_time &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rms_make
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>UART_LCD_process</STRONG> (Thumb, 908 bytes, Stack size 72 bytes, lcd_usart.o(i.UART_LCD_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = UART_LCD_process &rArr; USART_LCD_Transmit &rArr; Harmonic_Content_Calculate &rArr; powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Tem_trip
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_com_process
</UL>

<P><STRONG><a name="[ff]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[17a]"></a>UART_process</STRONG> (Thumb, 4262 bytes, Stack size 48 bytes, usart.o(i.UART_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = UART_process &rArr; factors_init &rArr; factor_first_init &rArr; ctrlword4_analyze &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_uart
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword3_analyze
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword2_analyze
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword1_analyze
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoDec
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leak_uart_cal_handle
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_uart_t_buf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_vol_setpoint
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_trip_tim
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_timing
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_time
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_password
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leakctrl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_hezha_tim
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_fenzha_tim
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_factors
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_cur_setpoint
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_baud
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_addr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_DATA_NOMAL
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_uart_cal_handle
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_vol_setpoint
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_vol
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak_class
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_cur
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_Power
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_trip_tim
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_timing
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time_run
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_state
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_reactive_Power
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_trip
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_protectoff
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_num_dataclear
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_vol
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_vol
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_leak
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_cur
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_leak
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_cur
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_leakctrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_hezha_tim
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_frequency_power
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_fenzha_tim
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factors
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factor_Power
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leaktrip
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakself
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakrecord
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakover
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_event_leakalarm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_cur_setpoint
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ctrlword
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_baud
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_addr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Slope_Value
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_AD_Value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LD_XL_Value
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DY_XL_Value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_XL_Value
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DL_AD_Value
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_verification
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_cal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_clear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Broadcasting_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_com_process
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>USART_LCD_Transmit</STRONG> (Thumb, 3764 bytes, Stack size 280 bytes, lcd_usart.o(i.USART_LCD_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = USART_LCD_Transmit &rArr; Harmonic_Content_Calculate &rArr; powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToChar
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_record
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xiebo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Readtime
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoDec
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_or_Readresponse
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_selftest
</UL>

<P><STRONG><a name="[ab]"></a>Uart_prepare</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.Uart_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_uart_t_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_DATA_NOMAL
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>

<P><STRONG><a name="[15e]"></a>Uart_prepare1</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.Uart_prepare1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_prepare1
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_uart_t_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_response1
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>V_Sample</STRONG> (Thumb, 274 bytes, Stack size 4 bytes, main.o(i.V_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = V_Sample
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
</UL>

<P><STRONG><a name="[19d]"></a>V_Sample_C</STRONG> (Thumb, 266 bytes, Stack size 4 bytes, main.o(i.V_Sample_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = V_Sample_C
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_hezha
</UL>

<P><STRONG><a name="[19e]"></a>V_max_process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.V_max_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = V_max_process &rArr; Write_V &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_V
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_V
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
</UL>

<P><STRONG><a name="[1a0]"></a>V_min_process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.V_min_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = V_min_process &rArr; Write_V &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_V
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_V
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
</UL>

<P><STRONG><a name="[1a1]"></a>Vol_Process</STRONG> (Thumb, 1288 bytes, Stack size 8 bytes, main.o(i.Vol_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Vol_Process &rArr; low_vol_prcoess &rArr; low_vol_trip &rArr; write_tingdian &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_prcoess
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_prcoess
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_prcoess
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lackzero_vol_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
</UL>

<P><STRONG><a name="[1a6]"></a>Vol_sample_process</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, main.o(i.Vol_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Vol_sample_process &rArr; V_min_process &rArr; Write_V &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_min_process
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_max_process
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_min_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_max_process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>WRITE_DATA_NOMAL</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usart.o(i.WRITE_DATA_NOMAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WRITE_DATA_NOMAL &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_factors
</UL>

<P><STRONG><a name="[1a7]"></a>Wait_selftest</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.Wait_selftest))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Wait_selftest &rArr; USART_LCD_Transmit &rArr; Harmonic_Content_Calculate &rArr; powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd12864_Write16CnCHAR
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>Write_I</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, main.o(i.Write_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Write_I &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_min_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_max_process
</UL>

<P><STRONG><a name="[1a8]"></a>Write_Leak_Record</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, main.o(i.Write_Leak_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Write_Leak_Record &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>Write_Record</STRONG> (Thumb, 1478 bytes, Stack size 72 bytes, main.o(i.Write_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Write_Record &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>Write_Selftest_Record</STRONG> (Thumb, 406 bytes, Stack size 64 bytes, main.o(i.Write_Selftest_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Write_Selftest_Record &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_C
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_B
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_handle_A
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conter_Updata
</UL>

<P><STRONG><a name="[19f]"></a>Write_V</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, main.o(i.Write_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Write_V &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_min_process
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_max_process
</UL>

<P><STRONG><a name="[18c]"></a>Write_addr</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, usart.o(i.Write_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Write_addr &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_uart_t_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[18d]"></a>Write_baud</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, usart.o(i.Write_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Write_baud &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[187]"></a>Write_ctrlword</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, usart.o(i.Write_ctrlword))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Write_ctrlword &rArr; ctrlword4_analyze &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword3_analyze
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword2_analyze
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword1_analyze
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword5_analyze
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[18b]"></a>Write_cur_setpoint</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, usart.o(i.Write_cur_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Write_cur_setpoint &rArr; Cur_uart_change &rArr; Cur_Switch &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_uart_change
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[185]"></a>Write_factors</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, usart.o(i.Write_factors))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Write_factors &rArr; Cur_Switch &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoDec
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_DATA_NOMAL
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[190]"></a>Write_fenzha_tim</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usart.o(i.Write_fenzha_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Write_fenzha_tim &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[191]"></a>Write_hezha_tim</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usart.o(i.Write_hezha_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Write_hezha_tim &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[122]"></a>Write_leak</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, main.o(i.Write_leak))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Write_leak &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_min_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_max_process
</UL>

<P><STRONG><a name="[188]"></a>Write_leakctrl</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, usart.o(i.Write_leakctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Write_leakctrl &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoDec
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[196]"></a>Write_or_Readresponse</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcd_usart.o(i.Write_or_Readresponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Write_or_Readresponse &rArr; LCD_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Uart_prepare
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
</UL>

<P><STRONG><a name="[186]"></a>Write_password</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, usart.o(i.Write_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Write_password &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[183]"></a>Write_time</STRONG> (Thumb, 632 bytes, Stack size 24 bytes, usart.o(i.Write_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Write_time &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[189]"></a>Write_timing</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usart.o(i.Write_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Write_timing &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[192]"></a>Write_trip_tim</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usart.o(i.Write_trip_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Write_trip_tim &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[18a]"></a>Write_vol_setpoint</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, usart.o(i.Write_vol_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Write_vol_setpoint &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoDec
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_data_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[197]"></a>Xiebo</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, main.o(i.Xiebo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Xiebo &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
</UL>

<P><STRONG><a name="[1d6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1bf]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1ab]"></a>c_hezha</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, main.o(i.c_hezha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_hezha &rArr; Lcd12864_Write16CnCHAR
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd12864_Write16CnCHAR
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_flags
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample_C
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha_process
</UL>

<P><STRONG><a name="[181]"></a>cal</STRONG> (Thumb, 1676 bytes, Stack size 56 bytes, usart.o(i.cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = cal &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[178]"></a>check_and_update</STRONG> (Thumb, 2602 bytes, Stack size 56 bytes, lcd_usart.o(i.check_and_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = check_and_update &rArr; ctrlword4_analyze &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword3_analyze
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword2_analyze
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword1_analyze
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
</UL>

<P><STRONG><a name="[16d]"></a>clear_flags</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, main.o(i.clear_flags))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_hezha
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_pos_judge
</UL>

<P><STRONG><a name="[80]"></a>clear_screen</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, lcd.o(i.clear_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clear_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_hezha
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_selftest
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conter_Updata
</UL>

<P><STRONG><a name="[1ad]"></a>clear_tingdian</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.clear_tingdian))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = clear_tingdian &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>copy_array</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tool.o(i.copy_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_leakctrl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_vol_setpoint
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_trip_tim
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_hezha_tim
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_fenzha_tim
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_factors
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_cur_setpoint
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_addr
</UL>

<P><STRONG><a name="[17d]"></a>ctrlword1_analyze</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.ctrlword1_analyze))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
</UL>

<P><STRONG><a name="[17e]"></a>ctrlword2_analyze</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.ctrlword2_analyze))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
</UL>

<P><STRONG><a name="[17f]"></a>ctrlword3_analyze</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.ctrlword3_analyze))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
</UL>

<P><STRONG><a name="[a4]"></a>ctrlword4_analyze</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, main.o(i.ctrlword4_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ctrlword4_analyze &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW_3D_E2_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
</UL>

<P><STRONG><a name="[173]"></a>ctrlword5_analyze</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, main.o(i.ctrlword5_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ctrlword5_analyze &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ctrlword
</UL>

<P><STRONG><a name="[9d]"></a>cur_actionhandle_A</STRONG> (Thumb, 500 bytes, Stack size 0 bytes, main.o(i.cur_actionhandle_A))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_Quick_Process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_BH_Process
</UL>

<P><STRONG><a name="[9f]"></a>cur_actionhandle_B</STRONG> (Thumb, 480 bytes, Stack size 0 bytes, main.o(i.cur_actionhandle_B))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_Quick_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_BH_Process
</UL>

<P><STRONG><a name="[a1]"></a>cur_actionhandle_C</STRONG> (Thumb, 500 bytes, Stack size 0 bytes, main.o(i.cur_actionhandle_C))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_Quick_Process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_BH_Process
</UL>

<P><STRONG><a name="[85]"></a>cur_handle_A</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, main.o(i.cur_handle_A))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_Quick_Process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_A_BH_Process
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
</UL>

<P><STRONG><a name="[86]"></a>cur_handle_B</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, main.o(i.cur_handle_B))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_Quick_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_B_BH_Process
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
</UL>

<P><STRONG><a name="[87]"></a>cur_handle_C</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, main.o(i.cur_handle_C))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_Quick_Process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D3_C_BH_Process
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Process
</UL>

<P><STRONG><a name="[106]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht7038.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Read
</UL>

<P><STRONG><a name="[1ae]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Cur_calibrae_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_C
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xiebo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cal
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_com_process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lackzero_vol_process
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha_process
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_short_process
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_hezha
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_selftest
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_addr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset_cal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_reset
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038Reset
</UL>

<P><STRONG><a name="[180]"></a>delay_uart</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tool.o(i.delay_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[10f]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[1b0]"></a>external_E2_read</STRONG> (Thumb, 3952 bytes, Stack size 40 bytes, main.o(i.external_E2_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = external_E2_read &rArr; Cur_Switch &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Cur_calibrae_data
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLongByte
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword3_analyze
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword2_analyze
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword1_analyze
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoDec
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword5_analyze
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Cur_calibrae_data1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SD_Cur_calibrae_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChartoHex
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors_init
</UL>

<P><STRONG><a name="[17b]"></a>factor_first_init</STRONG> (Thumb, 6876 bytes, Stack size 200 bytes, main.o(i.factor_first_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = factor_first_init &rArr; ctrlword4_analyze &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword4_analyze
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_C
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword3_analyze
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword2_analyze
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlword1_analyze
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DectoBCD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_selftest
</UL>

<P><STRONG><a name="[17c]"></a>factors_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.factors_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = factors_init &rArr; factor_first_init &rArr; ctrlword4_analyze &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factor_first_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_E2_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>fenzha</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.fenzha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fenzha
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
</UL>

<P><STRONG><a name="[1b1]"></a>fenzha_process</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, main.o(i.fenzha_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = fenzha_process &rArr; Write_Selftest_Record &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process_time
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>format_uart_t_buf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.format_uart_t_buf))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_addr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_prepare1
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_prepare
</UL>

<P><STRONG><a name="[1c0]"></a>frame_check</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, usart.o(i.frame_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frame_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_com_process
</UL>

<P><STRONG><a name="[198]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
</UL>

<P><STRONG><a name="[1b2]"></a>hand_short_process</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, main.o(i.hand_short_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hand_short_process &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>hezha</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.hezha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hezha
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha_process
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_hezha
</UL>

<P><STRONG><a name="[1b3]"></a>hezha_process</STRONG> (Thumb, 854 bytes, Stack size 8 bytes, main.o(i.hezha_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hezha_process &rArr; c_hezha &rArr; Lcd12864_Write16CnCHAR
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_hezha
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>initial_lcd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.initial_lcd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conter_Updata
</UL>

<P><STRONG><a name="[1b4]"></a>lack_vol_trip</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.lack_vol_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lack_vol_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lackzero_vol_process
</UL>

<P><STRONG><a name="[1a5]"></a>lackzero_vol_process</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, main.o(i.lackzero_vol_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lackzero_vol_process &rArr; lack_vol_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lack_vol_trip
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lackzero_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
</UL>

<P><STRONG><a name="[124]"></a>leak_handle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.leak_handle))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leak_process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_variable_leak
</UL>

<P><STRONG><a name="[194]"></a>leak_uart_cal_handle</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, usart.o(i.leak_uart_cal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = leak_uart_cal_handle &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToChar
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>

<P><STRONG><a name="[1a2]"></a>loss_phase_process</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, main.o(i.loss_phase_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = loss_phase_process &rArr; loss_phase_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_trip
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
</UL>

<P><STRONG><a name="[1b5]"></a>loss_phase_trip</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.loss_phase_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = loss_phase_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_process
</UL>

<P><STRONG><a name="[eb]"></a>low_vol_prcoess</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, main.o(i.low_vol_prcoess))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = low_vol_prcoess &rArr; low_vol_trip &rArr; write_tingdian &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_undervol
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_trip
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1b7]"></a>low_vol_trip</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.low_vol_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = low_vol_trip &rArr; write_tingdian &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tingdian
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_prcoess
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 654 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = main &rArr; uart_com_process &rArr; UART_LCD_process &rArr; USART_LCD_Transmit &rArr; Harmonic_Content_Calculate &rArr; powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Switch
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_lcd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_com_process
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tingdian
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hezha_process
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_short_process
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fenzha_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factors_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_tingdian
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_flags
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Leak_Record
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_selftest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_sample_process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_bill
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_time_process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Day_updata_process
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW_3D_E2_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentDataReadFun
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_sample_process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038_EEP_Initial
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7038Reset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[195]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LCD_Transmit
</UL>

<P><STRONG><a name="[154]"></a>point_just</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, usart.o(i.point_just))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = point_just &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_vol
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_vol
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_leak
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_min_cur
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_leak
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_max_cur
</UL>

<P><STRONG><a name="[109]"></a>powerMag</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, dsp_fft.o(i.powerMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
</UL>

<P><STRONG><a name="[1bb]"></a>read_tingdian</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.read_tingdian))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = read_tingdian &rArr; EEPROM_R &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_R
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>rms_make</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.rms_make))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process_time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Process
</UL>

<P><STRONG><a name="[10c]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Harmonic_Content_Calculate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerMag
</UL>

<P><STRONG><a name="[1ba]"></a>state_init</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, main.o(i.state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = state_init &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>transfer_command</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.transfer_command))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd12864_Write16CnCHAR
</UL>

<P><STRONG><a name="[11f]"></a>transfer_data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.transfer_data))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd12864_Write16CnCHAR
</UL>

<P><STRONG><a name="[1bc]"></a>uart_com_process</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.uart_com_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = uart_com_process &rArr; UART_LCD_process &rArr; USART_LCD_Transmit &rArr; Harmonic_Content_Calculate &rArr; powerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LCD_process
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_check
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_process
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>under_vol_prcoess</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, main.o(i.under_vol_prcoess))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = under_vol_prcoess &rArr; under_vol_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_trip
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
</UL>

<P><STRONG><a name="[1c1]"></a>under_vol_trip</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.under_vol_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = under_vol_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_prcoess
</UL>

<P><STRONG><a name="[1a4]"></a>up_vol_prcoess</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, main.o(i.up_vol_prcoess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = up_vol_prcoess &rArr; up_vol_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_C
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_B
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle_A
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_trip
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
</UL>

<P><STRONG><a name="[1c2]"></a>up_vol_trip</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.up_vol_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = up_vol_trip &rArr; Trip_Action &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trip_Action
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_data_propare
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_prcoess
</UL>

<P><STRONG><a name="[1aa]"></a>vol_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.vol_handle))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_trip
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_trip
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_trip
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_V
</UL>

<P><STRONG><a name="[19a]"></a>vol_handle_A</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.vol_handle_A))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_prcoess
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_prcoess
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample_C
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample
</UL>

<P><STRONG><a name="[19b]"></a>vol_handle_B</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.vol_handle_B))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_prcoess
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_prcoess
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample_C
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample
</UL>

<P><STRONG><a name="[19c]"></a>vol_handle_C</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.vol_handle_C))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_vol_prcoess
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;under_vol_prcoess
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_phase_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Selftest_Record
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Record
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample_C
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Sample
</UL>

<P><STRONG><a name="[1b6]"></a>vol_handle_undervol</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.vol_handle_undervol))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_prcoess
</UL>

<P><STRONG><a name="[1b8]"></a>write_tingdian</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.write_tingdian))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = write_tingdian &rArr; MODIFY_EEP_W &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODIFY_EEP_W
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_vol_trip
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cb]"></a>RCC_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[bb]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[c2]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c3]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[dc]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[cf]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[d4]"></a>RTC_DateUpdate</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.RTC_DateUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WeekDayNum
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[d8]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
</UL>

<P><STRONG><a name="[d9]"></a>RTC_ExitInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
</UL>

<P><STRONG><a name="[133]"></a>RTC_IsLeapYear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_IsLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateUpdate
</UL>

<P><STRONG><a name="[d1]"></a>RTC_ReadAlarmCounter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_ReadAlarmCounter))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[d0]"></a>RTC_ReadTimeCounter</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f1xx_hal_rtc.o(i.RTC_ReadTimeCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_ReadTimeCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[dd]"></a>RTC_WeekDayNum</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32f1xx_hal_rtc.o(i.RTC_WeekDayNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_WeekDayNum
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateUpdate
</UL>

<P><STRONG><a name="[d3]"></a>RTC_WriteAlarmCounter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_WriteAlarmCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_WriteAlarmCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[d2]"></a>RTC_WriteTimeCounter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_WriteTimeCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[4c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[f4]"></a>UART_EndRxTransfer</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>UART_Receive_IT</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>UART_SetConfig</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
